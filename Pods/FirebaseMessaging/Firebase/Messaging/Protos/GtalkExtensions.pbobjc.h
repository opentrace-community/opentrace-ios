/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buzz/mobile/proto/gtalk_extensions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class GtalkOtrItem;
@class GtalkPhoto;
@class GtalkRosterItem;
@class GtalkSharedStatus_StatusList;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum GtalkRosterItem_SubscriptionType

typedef GPB_ENUM(GtalkRosterItem_SubscriptionType) {
  GtalkRosterItem_SubscriptionType_None = 0,
  GtalkRosterItem_SubscriptionType_To = 1,
  GtalkRosterItem_SubscriptionType_From = 2,
  GtalkRosterItem_SubscriptionType_Both = 3,
  GtalkRosterItem_SubscriptionType_Remove = 4,
};

GPBEnumDescriptor *GtalkRosterItem_SubscriptionType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkRosterItem_SubscriptionType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkRosterItem_AskType

typedef GPB_ENUM(GtalkRosterItem_AskType) {
  GtalkRosterItem_AskType_Subscribe = 0,
};

GPBEnumDescriptor *GtalkRosterItem_AskType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkRosterItem_AskType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkRosterItem_DisplayType

typedef GPB_ENUM(GtalkRosterItem_DisplayType) {
  GtalkRosterItem_DisplayType_Blocked = 0,
  GtalkRosterItem_DisplayType_Hidden = 1,
  GtalkRosterItem_DisplayType_Pinned = 2,
};

GPBEnumDescriptor *GtalkRosterItem_DisplayType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkRosterItem_DisplayType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkSharedStatus_ShowType

typedef GPB_ENUM(GtalkSharedStatus_ShowType) {
  GtalkSharedStatus_ShowType_Default = 0,
  GtalkSharedStatus_ShowType_Dnd = 1,
};

GPBEnumDescriptor *GtalkSharedStatus_ShowType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkSharedStatus_ShowType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkPostAuthBatchQuery_CapabilitiesExtFlags

typedef GPB_ENUM(GtalkPostAuthBatchQuery_CapabilitiesExtFlags) {
  GtalkPostAuthBatchQuery_CapabilitiesExtFlags_HasVoiceV1 = 1,
  GtalkPostAuthBatchQuery_CapabilitiesExtFlags_HasVideoV1 = 2,
  GtalkPostAuthBatchQuery_CapabilitiesExtFlags_HasCameraV1 = 4,
  GtalkPostAuthBatchQuery_CapabilitiesExtFlags_HasPmucV1 = 8,
};

GPBEnumDescriptor *GtalkPostAuthBatchQuery_CapabilitiesExtFlags_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkPostAuthBatchQuery_CapabilitiesExtFlags_IsValidValue(int32_t value);

#pragma mark - GtalkGtalkExtensionsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface GtalkGtalkExtensionsRoot : GPBRootObject
@end

#pragma mark - GtalkRosterQuery

typedef GPB_ENUM(GtalkRosterQuery_FieldNumber) {
  GtalkRosterQuery_FieldNumber_Etag = 1,
  GtalkRosterQuery_FieldNumber_NotModified = 2,
  GtalkRosterQuery_FieldNumber_ItemArray = 3,
  GtalkRosterQuery_FieldNumber_AvatarWidth = 4,
  GtalkRosterQuery_FieldNumber_AvatarHeight = 5,
};

@interface GtalkRosterQuery : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *etag;
/** Test to see if @c etag has been set. */
@property(nonatomic, readwrite) BOOL hasEtag;


@property(nonatomic, readwrite) BOOL notModified;

@property(nonatomic, readwrite) BOOL hasNotModified;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkRosterItem*> *itemArray;
/** The number of items in @c itemArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemArray_Count;


@property(nonatomic, readwrite) int32_t avatarWidth;

@property(nonatomic, readwrite) BOOL hasAvatarWidth;

@property(nonatomic, readwrite) int32_t avatarHeight;

@property(nonatomic, readwrite) BOOL hasAvatarHeight;
@end

#pragma mark - GtalkRosterItem

typedef GPB_ENUM(GtalkRosterItem_FieldNumber) {
  GtalkRosterItem_FieldNumber_Jid = 1,
  GtalkRosterItem_FieldNumber_Name = 2,
  GtalkRosterItem_FieldNumber_Subscription = 3,
  GtalkRosterItem_FieldNumber_Ask = 4,
  GtalkRosterItem_FieldNumber_GroupArray = 5,
  GtalkRosterItem_FieldNumber_QuickContact = 6,
  GtalkRosterItem_FieldNumber_Display = 7,
  GtalkRosterItem_FieldNumber_Rejected = 8,
};

@interface GtalkRosterItem : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *jid;
/** Test to see if @c jid has been set. */
@property(nonatomic, readwrite) BOOL hasJid;


@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;


@property(nonatomic, readwrite) GtalkRosterItem_SubscriptionType subscription;

@property(nonatomic, readwrite) BOOL hasSubscription;

@property(nonatomic, readwrite) GtalkRosterItem_AskType ask;

@property(nonatomic, readwrite) BOOL hasAsk;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *groupArray;
/** The number of items in @c groupArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger groupArray_Count;


@property(nonatomic, readwrite) BOOL quickContact;

@property(nonatomic, readwrite) BOOL hasQuickContact;

@property(nonatomic, readwrite) GtalkRosterItem_DisplayType display;

@property(nonatomic, readwrite) BOOL hasDisplay;

@property(nonatomic, readwrite) BOOL rejected;

@property(nonatomic, readwrite) BOOL hasRejected;
@end

#pragma mark - GtalkRmqLastId

typedef GPB_ENUM(GtalkRmqLastId_FieldNumber) {
  GtalkRmqLastId_FieldNumber_Id_p = 1,
};

@interface GtalkRmqLastId : GPBMessage


@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@end

#pragma mark - GtalkRmqAck

typedef GPB_ENUM(GtalkRmqAck_FieldNumber) {
  GtalkRmqAck_FieldNumber_Id_p = 1,
};

@interface GtalkRmqAck : GPBMessage


@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@end

#pragma mark - GtalkVCard

typedef GPB_ENUM(GtalkVCard_FieldNumber) {
  GtalkVCard_FieldNumber_Version = 1,
  GtalkVCard_FieldNumber_FullName = 2,
  GtalkVCard_FieldNumber_Photo = 3,
  GtalkVCard_FieldNumber_AvatarHash = 4,
  GtalkVCard_FieldNumber_Modified = 5,
};

@interface GtalkVCard : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *version;
/** Test to see if @c version has been set. */
@property(nonatomic, readwrite) BOOL hasVersion;


@property(nonatomic, readwrite, copy, null_resettable) NSString *fullName;
/** Test to see if @c fullName has been set. */
@property(nonatomic, readwrite) BOOL hasFullName;


@property(nonatomic, readwrite, strong, null_resettable) GtalkPhoto *photo;
/** Test to see if @c photo has been set. */
@property(nonatomic, readwrite) BOOL hasPhoto;


@property(nonatomic, readwrite, copy, null_resettable) NSString *avatarHash;
/** Test to see if @c avatarHash has been set. */
@property(nonatomic, readwrite) BOOL hasAvatarHash;


@property(nonatomic, readwrite) BOOL modified;

@property(nonatomic, readwrite) BOOL hasModified;
@end

#pragma mark - GtalkPhoto

typedef GPB_ENUM(GtalkPhoto_FieldNumber) {
  GtalkPhoto_FieldNumber_Type = 1,
  GtalkPhoto_FieldNumber_Data_p = 2,
};

@interface GtalkPhoto : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *type;
/** Test to see if @c type has been set. */
@property(nonatomic, readwrite) BOOL hasType;


@property(nonatomic, readwrite, copy, null_resettable) NSString *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - GtalkChatRead

typedef GPB_ENUM(GtalkChatRead_FieldNumber) {
  GtalkChatRead_FieldNumber_User = 1,
};

@interface GtalkChatRead : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@end

#pragma mark - GtalkChatClosed

typedef GPB_ENUM(GtalkChatClosed_FieldNumber) {
  GtalkChatClosed_FieldNumber_User = 1,
};

@interface GtalkChatClosed : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@end

#pragma mark - GtalkCapabilities

typedef GPB_ENUM(GtalkCapabilities_FieldNumber) {
  GtalkCapabilities_FieldNumber_Node = 1,
  GtalkCapabilities_FieldNumber_Ver = 2,
  GtalkCapabilities_FieldNumber_Ext = 3,
  GtalkCapabilities_FieldNumber_Hash_p = 4,
};

@interface GtalkCapabilities : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *node;
/** Test to see if @c node has been set. */
@property(nonatomic, readwrite) BOOL hasNode;


@property(nonatomic, readwrite, copy, null_resettable) NSString *ver;
/** Test to see if @c ver has been set. */
@property(nonatomic, readwrite) BOOL hasVer;


@property(nonatomic, readwrite, copy, null_resettable) NSString *ext;
/** Test to see if @c ext has been set. */
@property(nonatomic, readwrite) BOOL hasExt;


@property(nonatomic, readwrite, copy, null_resettable) NSString *hash_p;
/** Test to see if @c hash_p has been set. */
@property(nonatomic, readwrite) BOOL hasHash_p;

@end

#pragma mark - GtalkSharedStatus

typedef GPB_ENUM(GtalkSharedStatus_FieldNumber) {
  GtalkSharedStatus_FieldNumber_StatusMax = 1,
  GtalkSharedStatus_FieldNumber_StatusListMax = 2,
  GtalkSharedStatus_FieldNumber_StatusListContentsMax = 3,
  GtalkSharedStatus_FieldNumber_Status = 4,
  GtalkSharedStatus_FieldNumber_Show = 5,
  GtalkSharedStatus_FieldNumber_StatusListArray = 6,
  GtalkSharedStatus_FieldNumber_Invisible = 9,
  GtalkSharedStatus_FieldNumber_StatusMinVersion = 10,
};

@interface GtalkSharedStatus : GPBMessage


@property(nonatomic, readwrite) int32_t statusMax;

@property(nonatomic, readwrite) BOOL hasStatusMax;

@property(nonatomic, readwrite) int32_t statusListMax;

@property(nonatomic, readwrite) BOOL hasStatusListMax;

@property(nonatomic, readwrite) int32_t statusListContentsMax;

@property(nonatomic, readwrite) BOOL hasStatusListContentsMax;

@property(nonatomic, readwrite, copy, null_resettable) NSString *status;
/** Test to see if @c status has been set. */
@property(nonatomic, readwrite) BOOL hasStatus;


@property(nonatomic, readwrite) GtalkSharedStatus_ShowType show;

@property(nonatomic, readwrite) BOOL hasShow;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkSharedStatus_StatusList*> *statusListArray;
/** The number of items in @c statusListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger statusListArray_Count;


@property(nonatomic, readwrite) BOOL invisible;

@property(nonatomic, readwrite) BOOL hasInvisible;

@property(nonatomic, readwrite) int32_t statusMinVersion;

@property(nonatomic, readwrite) BOOL hasStatusMinVersion;
@end

#pragma mark - GtalkSharedStatus_StatusList

typedef GPB_ENUM(GtalkSharedStatus_StatusList_FieldNumber) {
  GtalkSharedStatus_StatusList_FieldNumber_Show = 7,
  GtalkSharedStatus_StatusList_FieldNumber_StatusArray = 8,
};

@interface GtalkSharedStatus_StatusList : GPBMessage


@property(nonatomic, readwrite) GtalkSharedStatus_ShowType show;

@property(nonatomic, readwrite) BOOL hasShow;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *statusArray;
/** The number of items in @c statusArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger statusArray_Count;

@end

#pragma mark - GtalkOtrQuery

typedef GPB_ENUM(GtalkOtrQuery_FieldNumber) {
  GtalkOtrQuery_FieldNumber_NosaveDefault = 1,
  GtalkOtrQuery_FieldNumber_ItemArray = 2,
  GtalkOtrQuery_FieldNumber_Etag = 3,
  GtalkOtrQuery_FieldNumber_NotModified = 4,
};

@interface GtalkOtrQuery : GPBMessage


@property(nonatomic, readwrite) BOOL nosaveDefault;

@property(nonatomic, readwrite) BOOL hasNosaveDefault;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkOtrItem*> *itemArray;
/** The number of items in @c itemArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemArray_Count;


@property(nonatomic, readwrite, copy, null_resettable) NSString *etag;
/** Test to see if @c etag has been set. */
@property(nonatomic, readwrite) BOOL hasEtag;


@property(nonatomic, readwrite) BOOL notModified;

@property(nonatomic, readwrite) BOOL hasNotModified;
@end

#pragma mark - GtalkOtrItem

typedef GPB_ENUM(GtalkOtrItem_FieldNumber) {
  GtalkOtrItem_FieldNumber_Jid = 1,
  GtalkOtrItem_FieldNumber_Nosave = 2,
  GtalkOtrItem_FieldNumber_ChangedByBuddy = 3,
};

@interface GtalkOtrItem : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *jid;
/** Test to see if @c jid has been set. */
@property(nonatomic, readwrite) BOOL hasJid;


@property(nonatomic, readwrite) BOOL nosave;

@property(nonatomic, readwrite) BOOL hasNosave;

@property(nonatomic, readwrite) BOOL changedByBuddy;

@property(nonatomic, readwrite) BOOL hasChangedByBuddy;
@end

#pragma mark - GtalkIdle

typedef GPB_ENUM(GtalkIdle_FieldNumber) {
  GtalkIdle_FieldNumber_Idle = 1,
  GtalkIdle_FieldNumber_Away = 2,
};

@interface GtalkIdle : GPBMessage


@property(nonatomic, readwrite) BOOL idle;

@property(nonatomic, readwrite) BOOL hasIdle;

@property(nonatomic, readwrite) BOOL away;

@property(nonatomic, readwrite) BOOL hasAway;
@end

#pragma mark - GtalkPostAuthBatchQuery

typedef GPB_ENUM(GtalkPostAuthBatchQuery_FieldNumber) {
  GtalkPostAuthBatchQuery_FieldNumber_Available = 1,
  GtalkPostAuthBatchQuery_FieldNumber_DeviceIdle = 2,
  GtalkPostAuthBatchQuery_FieldNumber_MobileIndicator = 3,
  GtalkPostAuthBatchQuery_FieldNumber_SharedStatusVersion = 4,
  GtalkPostAuthBatchQuery_FieldNumber_RosterEtag = 5,
  GtalkPostAuthBatchQuery_FieldNumber_OtrEtag = 6,
  GtalkPostAuthBatchQuery_FieldNumber_AvatarHash = 7,
  GtalkPostAuthBatchQuery_FieldNumber_VcardQueryStanzaId = 8,
  GtalkPostAuthBatchQuery_FieldNumber_CapabilitiesExtFlags = 9,
};

@interface GtalkPostAuthBatchQuery : GPBMessage


@property(nonatomic, readwrite) BOOL available;

@property(nonatomic, readwrite) BOOL hasAvailable;

@property(nonatomic, readwrite) BOOL deviceIdle;

@property(nonatomic, readwrite) BOOL hasDeviceIdle;

@property(nonatomic, readwrite) BOOL mobileIndicator;

@property(nonatomic, readwrite) BOOL hasMobileIndicator;

@property(nonatomic, readwrite) int32_t sharedStatusVersion;

@property(nonatomic, readwrite) BOOL hasSharedStatusVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *rosterEtag;
/** Test to see if @c rosterEtag has been set. */
@property(nonatomic, readwrite) BOOL hasRosterEtag;


@property(nonatomic, readwrite, copy, null_resettable) NSString *otrEtag;
/** Test to see if @c otrEtag has been set. */
@property(nonatomic, readwrite) BOOL hasOtrEtag;


@property(nonatomic, readwrite, copy, null_resettable) NSString *avatarHash;
/** Test to see if @c avatarHash has been set. */
@property(nonatomic, readwrite) BOOL hasAvatarHash;


@property(nonatomic, readwrite, copy, null_resettable) NSString *vcardQueryStanzaId;
/** Test to see if @c vcardQueryStanzaId has been set. */
@property(nonatomic, readwrite) BOOL hasVcardQueryStanzaId;


@property(nonatomic, readwrite) int32_t capabilitiesExtFlags;

@property(nonatomic, readwrite) BOOL hasCapabilitiesExtFlags;
@end

#pragma mark - GtalkStreamAck

@interface GtalkStreamAck : GPBMessage

@end

#pragma mark - GtalkSelectiveAck

typedef GPB_ENUM(GtalkSelectiveAck_FieldNumber) {
  GtalkSelectiveAck_FieldNumber_IdArray = 1,
};

@interface GtalkSelectiveAck : GPBMessage


@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *idArray;
/** The number of items in @c idArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger idArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
