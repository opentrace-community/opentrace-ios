/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buzz/mobile/proto/gtalk_core.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class GtalkAppData;
@class GtalkCellTower;
@class GtalkClientEvent;
@class GtalkErrorInfo;
@class GtalkExtension;
@class GtalkHeartbeatConfig;
@class GtalkHeartbeatStat;
@class GtalkPresenceStanza;
@class GtalkSetting;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum GtalkLoginRequest_AuthService

typedef GPB_ENUM(GtalkLoginRequest_AuthService) {
  GtalkLoginRequest_AuthService_Mail = 0,
  GtalkLoginRequest_AuthService_AndroidCloudToDeviceMessage = 1,
  GtalkLoginRequest_AuthService_AndroidId = 2,
};

GPBEnumDescriptor *GtalkLoginRequest_AuthService_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkLoginRequest_AuthService_IsValidValue(int32_t value);

#pragma mark - Enum GtalkMessageStanza_MessageType

typedef GPB_ENUM(GtalkMessageStanza_MessageType) {
  GtalkMessageStanza_MessageType_Normal = 0,
  GtalkMessageStanza_MessageType_Chat = 1,
  GtalkMessageStanza_MessageType_Groupchat = 2,
  GtalkMessageStanza_MessageType_Headline = 3,
  GtalkMessageStanza_MessageType_Error = 4,
};

GPBEnumDescriptor *GtalkMessageStanza_MessageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkMessageStanza_MessageType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkPresenceStanza_PresenceType

typedef GPB_ENUM(GtalkPresenceStanza_PresenceType) {
  GtalkPresenceStanza_PresenceType_Unavailable = 0,
  GtalkPresenceStanza_PresenceType_Subscribe = 1,
  GtalkPresenceStanza_PresenceType_Subscribed = 2,
  GtalkPresenceStanza_PresenceType_Unsubscribe = 3,
  GtalkPresenceStanza_PresenceType_Unsubscribed = 4,
  GtalkPresenceStanza_PresenceType_Probe = 5,
  GtalkPresenceStanza_PresenceType_Error = 6,
};

GPBEnumDescriptor *GtalkPresenceStanza_PresenceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkPresenceStanza_PresenceType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkPresenceStanza_ShowType

typedef GPB_ENUM(GtalkPresenceStanza_ShowType) {
  GtalkPresenceStanza_ShowType_Away = 0,
  GtalkPresenceStanza_ShowType_Chat = 1,
  GtalkPresenceStanza_ShowType_Dnd = 2,
  GtalkPresenceStanza_ShowType_Xa = 3,
};

GPBEnumDescriptor *GtalkPresenceStanza_ShowType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkPresenceStanza_ShowType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkPresenceStanza_ClientType

typedef GPB_ENUM(GtalkPresenceStanza_ClientType) {
  GtalkPresenceStanza_ClientType_Mobile = 0,
  GtalkPresenceStanza_ClientType_Android = 1,
};

GPBEnumDescriptor *GtalkPresenceStanza_ClientType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkPresenceStanza_ClientType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkPresenceStanza_CapabilitiesFlags

typedef GPB_ENUM(GtalkPresenceStanza_CapabilitiesFlags) {
  GtalkPresenceStanza_CapabilitiesFlags_HasVoiceV1 = 1,
  GtalkPresenceStanza_CapabilitiesFlags_HasVideoV1 = 2,
  GtalkPresenceStanza_CapabilitiesFlags_HasCameraV1 = 4,
  GtalkPresenceStanza_CapabilitiesFlags_HasPmucV1 = 8,
};

GPBEnumDescriptor *GtalkPresenceStanza_CapabilitiesFlags_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkPresenceStanza_CapabilitiesFlags_IsValidValue(int32_t value);

#pragma mark - Enum GtalkBatchPresenceStanza_Type

typedef GPB_ENUM(GtalkBatchPresenceStanza_Type) {
  GtalkBatchPresenceStanza_Type_Get = 0,
  GtalkBatchPresenceStanza_Type_Set = 1,
};

GPBEnumDescriptor *GtalkBatchPresenceStanza_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkBatchPresenceStanza_Type_IsValidValue(int32_t value);

#pragma mark - Enum GtalkIqStanza_IqType

typedef GPB_ENUM(GtalkIqStanza_IqType) {
  GtalkIqStanza_IqType_Get = 0,
  GtalkIqStanza_IqType_Set = 1,
  GtalkIqStanza_IqType_Result = 2,
  GtalkIqStanza_IqType_Error = 3,
};

GPBEnumDescriptor *GtalkIqStanza_IqType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkIqStanza_IqType_IsValidValue(int32_t value);

#pragma mark - Enum GtalkClientEvent_Type

typedef GPB_ENUM(GtalkClientEvent_Type) {
  GtalkClientEvent_Type_Unknown = 0,
  GtalkClientEvent_Type_DiscardedEvents = 1,
  GtalkClientEvent_Type_FailedConnection = 2,
  GtalkClientEvent_Type_SuccessfulConnection = 3,
  GtalkClientEvent_Type_McsReconnectRequest = 4,
  GtalkClientEvent_Type_FailedSocketCreationMcsReconnect = 5,
  GtalkClientEvent_Type_McsReconnectLimited = 6,
};

GPBEnumDescriptor *GtalkClientEvent_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkClientEvent_Type_IsValidValue(int32_t value);

#pragma mark - Enum GtalkClientEvent_McsReconnectAction

typedef GPB_ENUM(GtalkClientEvent_McsReconnectAction) {
  GtalkClientEvent_McsReconnectAction_None = 0,
  GtalkClientEvent_McsReconnectAction_NotConnected = 1,
  GtalkClientEvent_McsReconnectAction_TooSoon = 2,
};

GPBEnumDescriptor *GtalkClientEvent_McsReconnectAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GtalkClientEvent_McsReconnectAction_IsValidValue(int32_t value);

#pragma mark - GtalkGtalkCoreRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface GtalkGtalkCoreRoot : GPBRootObject
@end

#pragma mark - GtalkHeartbeatPing

typedef GPB_ENUM(GtalkHeartbeatPing_FieldNumber) {
  GtalkHeartbeatPing_FieldNumber_StreamId = 1,
  GtalkHeartbeatPing_FieldNumber_LastStreamIdReceived = 2,
  GtalkHeartbeatPing_FieldNumber_Status = 3,
  GtalkHeartbeatPing_FieldNumber_CellTower = 4,
  GtalkHeartbeatPing_FieldNumber_IntervalMs = 5,
};

@interface GtalkHeartbeatPing : GPBMessage


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite) int64_t status;

@property(nonatomic, readwrite) BOOL hasStatus;

@property(nonatomic, readwrite, strong, null_resettable) GtalkCellTower *cellTower DEPRECATED_ATTRIBUTE;
/** Test to see if @c cellTower has been set. */
@property(nonatomic, readwrite) BOOL hasCellTower DEPRECATED_ATTRIBUTE;


@property(nonatomic, readwrite) int32_t intervalMs;

@property(nonatomic, readwrite) BOOL hasIntervalMs;
@end

#pragma mark - GtalkHeartbeatAck

typedef GPB_ENUM(GtalkHeartbeatAck_FieldNumber) {
  GtalkHeartbeatAck_FieldNumber_StreamId = 1,
  GtalkHeartbeatAck_FieldNumber_LastStreamIdReceived = 2,
  GtalkHeartbeatAck_FieldNumber_Status = 3,
  GtalkHeartbeatAck_FieldNumber_CellTower = 4,
  GtalkHeartbeatAck_FieldNumber_IntervalMs = 5,
};

@interface GtalkHeartbeatAck : GPBMessage


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite) int64_t status;

@property(nonatomic, readwrite) BOOL hasStatus;

@property(nonatomic, readwrite, strong, null_resettable) GtalkCellTower *cellTower DEPRECATED_ATTRIBUTE;
/** Test to see if @c cellTower has been set. */
@property(nonatomic, readwrite) BOOL hasCellTower DEPRECATED_ATTRIBUTE;


@property(nonatomic, readwrite) int32_t intervalMs;

@property(nonatomic, readwrite) BOOL hasIntervalMs;
@end

#pragma mark - GtalkErrorInfo

typedef GPB_ENUM(GtalkErrorInfo_FieldNumber) {
  GtalkErrorInfo_FieldNumber_Code = 1,
  GtalkErrorInfo_FieldNumber_Message = 2,
  GtalkErrorInfo_FieldNumber_Type = 3,
  GtalkErrorInfo_FieldNumber_Extension = 4,
};

@interface GtalkErrorInfo : GPBMessage


@property(nonatomic, readwrite) int32_t code;

@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;


@property(nonatomic, readwrite, copy, null_resettable) NSString *type;
/** Test to see if @c type has been set. */
@property(nonatomic, readwrite) BOOL hasType;


@property(nonatomic, readwrite, strong, null_resettable) GtalkExtension *extension;
/** Test to see if @c extension has been set. */
@property(nonatomic, readwrite) BOOL hasExtension;

@end

#pragma mark - GtalkSetting

typedef GPB_ENUM(GtalkSetting_FieldNumber) {
  GtalkSetting_FieldNumber_Name = 1,
  GtalkSetting_FieldNumber_Value = 2,
};

@interface GtalkSetting : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;


@property(nonatomic, readwrite, copy, null_resettable) NSString *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

@end

#pragma mark - GtalkHeartbeatStat

typedef GPB_ENUM(GtalkHeartbeatStat_FieldNumber) {
  GtalkHeartbeatStat_FieldNumber_Ip = 1,
  GtalkHeartbeatStat_FieldNumber_Timeout = 2,
  GtalkHeartbeatStat_FieldNumber_IntervalMs = 3,
};

@interface GtalkHeartbeatStat : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *ip;
/** Test to see if @c ip has been set. */
@property(nonatomic, readwrite) BOOL hasIp;


@property(nonatomic, readwrite) BOOL timeout;

@property(nonatomic, readwrite) BOOL hasTimeout;

@property(nonatomic, readwrite) int32_t intervalMs;

@property(nonatomic, readwrite) BOOL hasIntervalMs;
@end

#pragma mark - GtalkHeartbeatConfig

typedef GPB_ENUM(GtalkHeartbeatConfig_FieldNumber) {
  GtalkHeartbeatConfig_FieldNumber_UploadStat = 1,
  GtalkHeartbeatConfig_FieldNumber_Ip = 2,
  GtalkHeartbeatConfig_FieldNumber_IntervalMs = 3,
};

@interface GtalkHeartbeatConfig : GPBMessage


@property(nonatomic, readwrite) BOOL uploadStat;

@property(nonatomic, readwrite) BOOL hasUploadStat;

@property(nonatomic, readwrite, copy, null_resettable) NSString *ip;
/** Test to see if @c ip has been set. */
@property(nonatomic, readwrite) BOOL hasIp;


@property(nonatomic, readwrite) int32_t intervalMs;

@property(nonatomic, readwrite) BOOL hasIntervalMs;
@end

#pragma mark - GtalkLoginRequest

typedef GPB_ENUM(GtalkLoginRequest_FieldNumber) {
  GtalkLoginRequest_FieldNumber_Id_p = 1,
  GtalkLoginRequest_FieldNumber_Domain = 2,
  GtalkLoginRequest_FieldNumber_User = 3,
  GtalkLoginRequest_FieldNumber_Resource = 4,
  GtalkLoginRequest_FieldNumber_AuthToken = 5,
  GtalkLoginRequest_FieldNumber_DeviceId = 6,
  GtalkLoginRequest_FieldNumber_LastRmqId = 7,
  GtalkLoginRequest_FieldNumber_SettingArray = 8,
  GtalkLoginRequest_FieldNumber_ReceivedPersistentIdArray = 10,
  GtalkLoginRequest_FieldNumber_IncludeStreamIds = 11,
  GtalkLoginRequest_FieldNumber_HeartbeatStat = 13,
  GtalkLoginRequest_FieldNumber_UseRmq2 = 14,
  GtalkLoginRequest_FieldNumber_AccountId = 15,
  GtalkLoginRequest_FieldNumber_AuthService = 16,
  GtalkLoginRequest_FieldNumber_NetworkType = 17,
  GtalkLoginRequest_FieldNumber_Status = 18,
  GtalkLoginRequest_FieldNumber_TokenVersionInfo = 19,
  GtalkLoginRequest_FieldNumber_CellTower = 20,
  GtalkLoginRequest_FieldNumber_GcmStartTimeMs = 21,
  GtalkLoginRequest_FieldNumber_ClientEventArray = 22,
  GtalkLoginRequest_FieldNumber_OnFallback = 23,
  GtalkLoginRequest_FieldNumber_NoPendingUpstream = 24,
  GtalkLoginRequest_FieldNumber_ReconnectRequestId = 25,
};

@interface GtalkLoginRequest : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *domain;
/** Test to see if @c domain has been set. */
@property(nonatomic, readwrite) BOOL hasDomain;


@property(nonatomic, readwrite, copy, null_resettable) NSString *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;


@property(nonatomic, readwrite, copy, null_resettable) NSString *resource;
/** Test to see if @c resource has been set. */
@property(nonatomic, readwrite) BOOL hasResource;


@property(nonatomic, readwrite, copy, null_resettable) NSString *authToken;
/** Test to see if @c authToken has been set. */
@property(nonatomic, readwrite) BOOL hasAuthToken;


@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;
/** Test to see if @c deviceId has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceId;


@property(nonatomic, readwrite) int64_t lastRmqId;

@property(nonatomic, readwrite) BOOL hasLastRmqId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkSetting*> *settingArray;
/** The number of items in @c settingArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger settingArray_Count;


@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *receivedPersistentIdArray;
/** The number of items in @c receivedPersistentIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger receivedPersistentIdArray_Count;


@property(nonatomic, readwrite) BOOL includeStreamIds;

@property(nonatomic, readwrite) BOOL hasIncludeStreamIds;

@property(nonatomic, readwrite, strong, null_resettable) GtalkHeartbeatStat *heartbeatStat;
/** Test to see if @c heartbeatStat has been set. */
@property(nonatomic, readwrite) BOOL hasHeartbeatStat;


@property(nonatomic, readwrite) BOOL useRmq2;

@property(nonatomic, readwrite) BOOL hasUseRmq2;

@property(nonatomic, readwrite) int64_t accountId;

@property(nonatomic, readwrite) BOOL hasAccountId;

@property(nonatomic, readwrite) GtalkLoginRequest_AuthService authService;

@property(nonatomic, readwrite) BOOL hasAuthService;

@property(nonatomic, readwrite) int32_t networkType;

@property(nonatomic, readwrite) BOOL hasNetworkType;

@property(nonatomic, readwrite) int64_t status;

@property(nonatomic, readwrite) BOOL hasStatus;

@property(nonatomic, readwrite, copy, null_resettable) NSString *tokenVersionInfo;
/** Test to see if @c tokenVersionInfo has been set. */
@property(nonatomic, readwrite) BOOL hasTokenVersionInfo;


@property(nonatomic, readwrite, strong, null_resettable) GtalkCellTower *cellTower DEPRECATED_ATTRIBUTE;
/** Test to see if @c cellTower has been set. */
@property(nonatomic, readwrite) BOOL hasCellTower DEPRECATED_ATTRIBUTE;


@property(nonatomic, readwrite) uint64_t gcmStartTimeMs;

@property(nonatomic, readwrite) BOOL hasGcmStartTimeMs;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkClientEvent*> *clientEventArray;
/** The number of items in @c clientEventArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger clientEventArray_Count;


@property(nonatomic, readwrite) BOOL onFallback;

@property(nonatomic, readwrite) BOOL hasOnFallback;

@property(nonatomic, readwrite) BOOL noPendingUpstream;

@property(nonatomic, readwrite) BOOL hasNoPendingUpstream;

@property(nonatomic, readwrite) int32_t reconnectRequestId;

@property(nonatomic, readwrite) BOOL hasReconnectRequestId;
@end

#pragma mark - GtalkLoginResponse

typedef GPB_ENUM(GtalkLoginResponse_FieldNumber) {
  GtalkLoginResponse_FieldNumber_Id_p = 1,
  GtalkLoginResponse_FieldNumber_Jid = 2,
  GtalkLoginResponse_FieldNumber_Error = 3,
  GtalkLoginResponse_FieldNumber_SettingArray = 4,
  GtalkLoginResponse_FieldNumber_StreamId = 5,
  GtalkLoginResponse_FieldNumber_LastStreamIdReceived = 6,
  GtalkLoginResponse_FieldNumber_HeartbeatConfig = 7,
  GtalkLoginResponse_FieldNumber_ServerTimestamp = 8,
};

@interface GtalkLoginResponse : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *jid;
/** Test to see if @c jid has been set. */
@property(nonatomic, readwrite) BOOL hasJid;


@property(nonatomic, readwrite, strong, null_resettable) GtalkErrorInfo *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;


@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkSetting*> *settingArray;
/** The number of items in @c settingArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger settingArray_Count;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite, strong, null_resettable) GtalkHeartbeatConfig *heartbeatConfig;
/** Test to see if @c heartbeatConfig has been set. */
@property(nonatomic, readwrite) BOOL hasHeartbeatConfig;


@property(nonatomic, readwrite) int64_t serverTimestamp;

@property(nonatomic, readwrite) BOOL hasServerTimestamp;
@end

#pragma mark - GtalkBindAccountRequest

typedef GPB_ENUM(GtalkBindAccountRequest_FieldNumber) {
  GtalkBindAccountRequest_FieldNumber_Id_p = 1,
  GtalkBindAccountRequest_FieldNumber_Domain = 2,
  GtalkBindAccountRequest_FieldNumber_User = 3,
  GtalkBindAccountRequest_FieldNumber_Resource = 4,
  GtalkBindAccountRequest_FieldNumber_AuthToken = 5,
  GtalkBindAccountRequest_FieldNumber_PersistentId = 6,
  GtalkBindAccountRequest_FieldNumber_StreamId = 7,
  GtalkBindAccountRequest_FieldNumber_LastStreamIdReceived = 8,
  GtalkBindAccountRequest_FieldNumber_AccountId = 9,
};

@interface GtalkBindAccountRequest : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *domain;
/** Test to see if @c domain has been set. */
@property(nonatomic, readwrite) BOOL hasDomain;


@property(nonatomic, readwrite, copy, null_resettable) NSString *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;


@property(nonatomic, readwrite, copy, null_resettable) NSString *resource;
/** Test to see if @c resource has been set. */
@property(nonatomic, readwrite) BOOL hasResource;


@property(nonatomic, readwrite, copy, null_resettable) NSString *authToken;
/** Test to see if @c authToken has been set. */
@property(nonatomic, readwrite) BOOL hasAuthToken;


@property(nonatomic, readwrite, copy, null_resettable) NSString *persistentId;
/** Test to see if @c persistentId has been set. */
@property(nonatomic, readwrite) BOOL hasPersistentId;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite) int64_t accountId;

@property(nonatomic, readwrite) BOOL hasAccountId;
@end

#pragma mark - GtalkBindAccountResponse

typedef GPB_ENUM(GtalkBindAccountResponse_FieldNumber) {
  GtalkBindAccountResponse_FieldNumber_Id_p = 1,
  GtalkBindAccountResponse_FieldNumber_Jid = 2,
  GtalkBindAccountResponse_FieldNumber_Error = 3,
  GtalkBindAccountResponse_FieldNumber_StreamId = 4,
  GtalkBindAccountResponse_FieldNumber_LastStreamIdReceived = 5,
};

@interface GtalkBindAccountResponse : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *jid;
/** Test to see if @c jid has been set. */
@property(nonatomic, readwrite) BOOL hasJid;


@property(nonatomic, readwrite, strong, null_resettable) GtalkErrorInfo *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;
@end

#pragma mark - GtalkStreamErrorStanza

typedef GPB_ENUM(GtalkStreamErrorStanza_FieldNumber) {
  GtalkStreamErrorStanza_FieldNumber_Type = 1,
  GtalkStreamErrorStanza_FieldNumber_Text = 2,
};

@interface GtalkStreamErrorStanza : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *type;
/** Test to see if @c type has been set. */
@property(nonatomic, readwrite) BOOL hasType;


@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@end

#pragma mark - GtalkClose

@interface GtalkClose : GPBMessage

@end

#pragma mark - GtalkExtension

typedef GPB_ENUM(GtalkExtension_FieldNumber) {
  GtalkExtension_FieldNumber_Id_p = 1,
  GtalkExtension_FieldNumber_Data_p = 2,
};

@interface GtalkExtension : GPBMessage


@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - GtalkMessageStanza

typedef GPB_ENUM(GtalkMessageStanza_FieldNumber) {
  GtalkMessageStanza_FieldNumber_RmqId = 1,
  GtalkMessageStanza_FieldNumber_Type = 2,
  GtalkMessageStanza_FieldNumber_Id_p = 3,
  GtalkMessageStanza_FieldNumber_From = 4,
  GtalkMessageStanza_FieldNumber_To = 5,
  GtalkMessageStanza_FieldNumber_Subject = 6,
  GtalkMessageStanza_FieldNumber_Body = 7,
  GtalkMessageStanza_FieldNumber_Thread = 8,
  GtalkMessageStanza_FieldNumber_Error = 9,
  GtalkMessageStanza_FieldNumber_ExtensionArray = 10,
  GtalkMessageStanza_FieldNumber_Nosave = 11,
  GtalkMessageStanza_FieldNumber_Timestamp = 12,
  GtalkMessageStanza_FieldNumber_PersistentId = 13,
  GtalkMessageStanza_FieldNumber_StreamId = 14,
  GtalkMessageStanza_FieldNumber_LastStreamIdReceived = 15,
  GtalkMessageStanza_FieldNumber_Read = 16,
  GtalkMessageStanza_FieldNumber_AccountId = 17,
};

@interface GtalkMessageStanza : GPBMessage


@property(nonatomic, readwrite) int64_t rmqId;

@property(nonatomic, readwrite) BOOL hasRmqId;

@property(nonatomic, readwrite) GtalkMessageStanza_MessageType type;

@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;


@property(nonatomic, readwrite, copy, null_resettable) NSString *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;


@property(nonatomic, readwrite, copy, null_resettable) NSString *subject;
/** Test to see if @c subject has been set. */
@property(nonatomic, readwrite) BOOL hasSubject;


@property(nonatomic, readwrite, copy, null_resettable) NSString *body;
/** Test to see if @c body has been set. */
@property(nonatomic, readwrite) BOOL hasBody;


@property(nonatomic, readwrite, copy, null_resettable) NSString *thread;
/** Test to see if @c thread has been set. */
@property(nonatomic, readwrite) BOOL hasThread;


@property(nonatomic, readwrite, strong, null_resettable) GtalkErrorInfo *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;


@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkExtension*> *extensionArray;
/** The number of items in @c extensionArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger extensionArray_Count;


@property(nonatomic, readwrite) BOOL nosave;

@property(nonatomic, readwrite) BOOL hasNosave;

@property(nonatomic, readwrite) int64_t timestamp;

@property(nonatomic, readwrite) BOOL hasTimestamp;

@property(nonatomic, readwrite, copy, null_resettable) NSString *persistentId;
/** Test to see if @c persistentId has been set. */
@property(nonatomic, readwrite) BOOL hasPersistentId;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite) BOOL read;

@property(nonatomic, readwrite) BOOL hasRead;

@property(nonatomic, readwrite) int64_t accountId;

@property(nonatomic, readwrite) BOOL hasAccountId;
@end

#pragma mark - GtalkPresenceStanza

typedef GPB_ENUM(GtalkPresenceStanza_FieldNumber) {
  GtalkPresenceStanza_FieldNumber_RmqId = 1,
  GtalkPresenceStanza_FieldNumber_Type = 2,
  GtalkPresenceStanza_FieldNumber_Id_p = 3,
  GtalkPresenceStanza_FieldNumber_From = 4,
  GtalkPresenceStanza_FieldNumber_To = 5,
  GtalkPresenceStanza_FieldNumber_Show = 6,
  GtalkPresenceStanza_FieldNumber_Status = 7,
  GtalkPresenceStanza_FieldNumber_Priority = 8,
  GtalkPresenceStanza_FieldNumber_Error = 9,
  GtalkPresenceStanza_FieldNumber_ExtensionArray = 10,
  GtalkPresenceStanza_FieldNumber_Client = 11,
  GtalkPresenceStanza_FieldNumber_AvatarHash = 12,
  GtalkPresenceStanza_FieldNumber_PersistentId = 13,
  GtalkPresenceStanza_FieldNumber_StreamId = 14,
  GtalkPresenceStanza_FieldNumber_LastStreamIdReceived = 15,
  GtalkPresenceStanza_FieldNumber_CapabilitiesFlags = 16,
  GtalkPresenceStanza_FieldNumber_AccountId = 17,
};

@interface GtalkPresenceStanza : GPBMessage


@property(nonatomic, readwrite) int64_t rmqId;

@property(nonatomic, readwrite) BOOL hasRmqId;

@property(nonatomic, readwrite) GtalkPresenceStanza_PresenceType type;

@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;


@property(nonatomic, readwrite, copy, null_resettable) NSString *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;


@property(nonatomic, readwrite) GtalkPresenceStanza_ShowType show;

@property(nonatomic, readwrite) BOOL hasShow;

@property(nonatomic, readwrite, copy, null_resettable) NSString *status;
/** Test to see if @c status has been set. */
@property(nonatomic, readwrite) BOOL hasStatus;


@property(nonatomic, readwrite) int32_t priority;

@property(nonatomic, readwrite) BOOL hasPriority;

@property(nonatomic, readwrite, strong, null_resettable) GtalkErrorInfo *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;


@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkExtension*> *extensionArray;
/** The number of items in @c extensionArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger extensionArray_Count;


@property(nonatomic, readwrite) GtalkPresenceStanza_ClientType client;

@property(nonatomic, readwrite) BOOL hasClient;

@property(nonatomic, readwrite, copy, null_resettable) NSString *avatarHash;
/** Test to see if @c avatarHash has been set. */
@property(nonatomic, readwrite) BOOL hasAvatarHash;


@property(nonatomic, readwrite, copy, null_resettable) NSString *persistentId;
/** Test to see if @c persistentId has been set. */
@property(nonatomic, readwrite) BOOL hasPersistentId;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite) int32_t capabilitiesFlags;

@property(nonatomic, readwrite) BOOL hasCapabilitiesFlags;

@property(nonatomic, readwrite) int64_t accountId;

@property(nonatomic, readwrite) BOOL hasAccountId;
@end

#pragma mark - GtalkBatchPresenceStanza

typedef GPB_ENUM(GtalkBatchPresenceStanza_FieldNumber) {
  GtalkBatchPresenceStanza_FieldNumber_Id_p = 1,
  GtalkBatchPresenceStanza_FieldNumber_To = 2,
  GtalkBatchPresenceStanza_FieldNumber_PresenceArray = 3,
  GtalkBatchPresenceStanza_FieldNumber_PersistentId = 4,
  GtalkBatchPresenceStanza_FieldNumber_StreamId = 5,
  GtalkBatchPresenceStanza_FieldNumber_LastStreamIdReceived = 6,
  GtalkBatchPresenceStanza_FieldNumber_AccountId = 7,
  GtalkBatchPresenceStanza_FieldNumber_Type = 8,
  GtalkBatchPresenceStanza_FieldNumber_Error = 9,
};

@interface GtalkBatchPresenceStanza : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;


@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkPresenceStanza*> *presenceArray;
/** The number of items in @c presenceArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger presenceArray_Count;


@property(nonatomic, readwrite, copy, null_resettable) NSString *persistentId;
/** Test to see if @c persistentId has been set. */
@property(nonatomic, readwrite) BOOL hasPersistentId;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite) int64_t accountId;

@property(nonatomic, readwrite) BOOL hasAccountId;

@property(nonatomic, readwrite) GtalkBatchPresenceStanza_Type type;

@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite, strong, null_resettable) GtalkErrorInfo *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;

@end

#pragma mark - GtalkIqStanza

typedef GPB_ENUM(GtalkIqStanza_FieldNumber) {
  GtalkIqStanza_FieldNumber_RmqId = 1,
  GtalkIqStanza_FieldNumber_Type = 2,
  GtalkIqStanza_FieldNumber_Id_p = 3,
  GtalkIqStanza_FieldNumber_From = 4,
  GtalkIqStanza_FieldNumber_To = 5,
  GtalkIqStanza_FieldNumber_Error = 6,
  GtalkIqStanza_FieldNumber_Extension = 7,
  GtalkIqStanza_FieldNumber_PersistentId = 8,
  GtalkIqStanza_FieldNumber_StreamId = 9,
  GtalkIqStanza_FieldNumber_LastStreamIdReceived = 10,
  GtalkIqStanza_FieldNumber_AccountId = 11,
  GtalkIqStanza_FieldNumber_Status = 12,
};

@interface GtalkIqStanza : GPBMessage


@property(nonatomic, readwrite) int64_t rmqId;

@property(nonatomic, readwrite) BOOL hasRmqId;

@property(nonatomic, readwrite) GtalkIqStanza_IqType type;

@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;


@property(nonatomic, readwrite, copy, null_resettable) NSString *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;


@property(nonatomic, readwrite, strong, null_resettable) GtalkErrorInfo *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;


@property(nonatomic, readwrite, strong, null_resettable) GtalkExtension *extension;
/** Test to see if @c extension has been set. */
@property(nonatomic, readwrite) BOOL hasExtension;


@property(nonatomic, readwrite, copy, null_resettable) NSString *persistentId;
/** Test to see if @c persistentId has been set. */
@property(nonatomic, readwrite) BOOL hasPersistentId;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite) int64_t accountId;

@property(nonatomic, readwrite) BOOL hasAccountId;

@property(nonatomic, readwrite) int64_t status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - GtalkAppData

typedef GPB_ENUM(GtalkAppData_FieldNumber) {
  GtalkAppData_FieldNumber_Key = 1,
  GtalkAppData_FieldNumber_Value = 2,
};

@interface GtalkAppData : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;


@property(nonatomic, readwrite, copy, null_resettable) NSString *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

@end

#pragma mark - GtalkDataMessageStanza

typedef GPB_ENUM(GtalkDataMessageStanza_FieldNumber) {
  GtalkDataMessageStanza_FieldNumber_RmqId = 1,
  GtalkDataMessageStanza_FieldNumber_Id_p = 2,
  GtalkDataMessageStanza_FieldNumber_From = 3,
  GtalkDataMessageStanza_FieldNumber_To = 4,
  GtalkDataMessageStanza_FieldNumber_Category = 5,
  GtalkDataMessageStanza_FieldNumber_Token = 6,
  GtalkDataMessageStanza_FieldNumber_AppDataArray = 7,
  GtalkDataMessageStanza_FieldNumber_FromTrustedServer = 8,
  GtalkDataMessageStanza_FieldNumber_PersistentId = 9,
  GtalkDataMessageStanza_FieldNumber_StreamId = 10,
  GtalkDataMessageStanza_FieldNumber_LastStreamIdReceived = 11,
  GtalkDataMessageStanza_FieldNumber_Permission = 12,
  GtalkDataMessageStanza_FieldNumber_RegId = 13,
  GtalkDataMessageStanza_FieldNumber_PkgSignature = 14,
  GtalkDataMessageStanza_FieldNumber_ClientId = 15,
  GtalkDataMessageStanza_FieldNumber_DeviceUserId = 16,
  GtalkDataMessageStanza_FieldNumber_Ttl = 17,
  GtalkDataMessageStanza_FieldNumber_Sent = 18,
  GtalkDataMessageStanza_FieldNumber_Queued = 19,
  GtalkDataMessageStanza_FieldNumber_Status = 20,
  GtalkDataMessageStanza_FieldNumber_RawData = 21,
  GtalkDataMessageStanza_FieldNumber_MaxDelay = 22,
  GtalkDataMessageStanza_FieldNumber_ActualDelay = 23,
  GtalkDataMessageStanza_FieldNumber_ImmediateAck = 24,
  GtalkDataMessageStanza_FieldNumber_DeliveryReceiptRequested = 25,
  GtalkDataMessageStanza_FieldNumber_ExternalMessageId = 26,
  GtalkDataMessageStanza_FieldNumber_Flags = 27,
  GtalkDataMessageStanza_FieldNumber_CellTower = 28,
  GtalkDataMessageStanza_FieldNumber_Priority = 29,
};

@interface GtalkDataMessageStanza : GPBMessage


@property(nonatomic, readwrite) int64_t rmqId;

@property(nonatomic, readwrite) BOOL hasRmqId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite, copy, null_resettable) NSString *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;


@property(nonatomic, readwrite, copy, null_resettable) NSString *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;


@property(nonatomic, readwrite, copy, null_resettable) NSString *category;
/** Test to see if @c category has been set. */
@property(nonatomic, readwrite) BOOL hasCategory;


@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;


@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GtalkAppData*> *appDataArray;
/** The number of items in @c appDataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger appDataArray_Count;


@property(nonatomic, readwrite) BOOL fromTrustedServer;

@property(nonatomic, readwrite) BOOL hasFromTrustedServer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *persistentId;
/** Test to see if @c persistentId has been set. */
@property(nonatomic, readwrite) BOOL hasPersistentId;


@property(nonatomic, readwrite) int32_t streamId;

@property(nonatomic, readwrite) BOOL hasStreamId;

@property(nonatomic, readwrite) int32_t lastStreamIdReceived;

@property(nonatomic, readwrite) BOOL hasLastStreamIdReceived;

@property(nonatomic, readwrite, copy, null_resettable) NSString *permission;
/** Test to see if @c permission has been set. */
@property(nonatomic, readwrite) BOOL hasPermission;


@property(nonatomic, readwrite, copy, null_resettable) NSString *regId;
/** Test to see if @c regId has been set. */
@property(nonatomic, readwrite) BOOL hasRegId;


@property(nonatomic, readwrite, copy, null_resettable) NSString *pkgSignature;
/** Test to see if @c pkgSignature has been set. */
@property(nonatomic, readwrite) BOOL hasPkgSignature;


@property(nonatomic, readwrite, copy, null_resettable) NSString *clientId;
/** Test to see if @c clientId has been set. */
@property(nonatomic, readwrite) BOOL hasClientId;


@property(nonatomic, readwrite) int64_t deviceUserId;

@property(nonatomic, readwrite) BOOL hasDeviceUserId;

@property(nonatomic, readwrite) int32_t ttl;

@property(nonatomic, readwrite) BOOL hasTtl;

@property(nonatomic, readwrite) int64_t sent;

@property(nonatomic, readwrite) BOOL hasSent;

@property(nonatomic, readwrite) int32_t queued;

@property(nonatomic, readwrite) BOOL hasQueued;

@property(nonatomic, readwrite) int64_t status;

@property(nonatomic, readwrite) BOOL hasStatus;

@property(nonatomic, readwrite, copy, null_resettable) NSData *rawData;
/** Test to see if @c rawData has been set. */
@property(nonatomic, readwrite) BOOL hasRawData;


@property(nonatomic, readwrite) int32_t maxDelay;

@property(nonatomic, readwrite) BOOL hasMaxDelay;

@property(nonatomic, readwrite) int32_t actualDelay;

@property(nonatomic, readwrite) BOOL hasActualDelay;

@property(nonatomic, readwrite) BOOL immediateAck;

@property(nonatomic, readwrite) BOOL hasImmediateAck;

@property(nonatomic, readwrite) BOOL deliveryReceiptRequested;

@property(nonatomic, readwrite) BOOL hasDeliveryReceiptRequested;

@property(nonatomic, readwrite, copy, null_resettable) NSString *externalMessageId;
/** Test to see if @c externalMessageId has been set. */
@property(nonatomic, readwrite) BOOL hasExternalMessageId;


@property(nonatomic, readwrite) int64_t flags;

@property(nonatomic, readwrite) BOOL hasFlags;

@property(nonatomic, readwrite, strong, null_resettable) GtalkCellTower *cellTower DEPRECATED_ATTRIBUTE;
/** Test to see if @c cellTower has been set. */
@property(nonatomic, readwrite) BOOL hasCellTower DEPRECATED_ATTRIBUTE;


@property(nonatomic, readwrite) int32_t priority;

@property(nonatomic, readwrite) BOOL hasPriority;
@end

#pragma mark - GtalkTalkMetadata

typedef GPB_ENUM(GtalkTalkMetadata_FieldNumber) {
  GtalkTalkMetadata_FieldNumber_Foreground = 1,
};

@interface GtalkTalkMetadata : GPBMessage


@property(nonatomic, readwrite) BOOL foreground;

@property(nonatomic, readwrite) BOOL hasForeground;
@end

#pragma mark - GtalkCellTower

typedef GPB_ENUM(GtalkCellTower_FieldNumber) {
  GtalkCellTower_FieldNumber_Id_p = 1,
  GtalkCellTower_FieldNumber_KnownCongestionStatus = 2,
};

DEPRECATED_ATTRIBUTE
@interface GtalkCellTower : GPBMessage


@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;


@property(nonatomic, readwrite) int32_t knownCongestionStatus;

@property(nonatomic, readwrite) BOOL hasKnownCongestionStatus;
@end

#pragma mark - GtalkClientEvent

typedef GPB_ENUM(GtalkClientEvent_FieldNumber) {
  GtalkClientEvent_FieldNumber_Type = 1,
  GtalkClientEvent_FieldNumber_NumberDiscardedEvents = 100,
  GtalkClientEvent_FieldNumber_NetworkType = 200,
  GtalkClientEvent_FieldNumber_NetworkPort = 201,
  GtalkClientEvent_FieldNumber_TimeConnectionStartedMs = 202,
  GtalkClientEvent_FieldNumber_TimeConnectionEndedMs = 203,
  GtalkClientEvent_FieldNumber_ErrorCode = 204,
  GtalkClientEvent_FieldNumber_TimeConnectionEstablishedMs = 300,
  GtalkClientEvent_FieldNumber_McsReconnectAction = 400,
};

@interface GtalkClientEvent : GPBMessage


@property(nonatomic, readwrite) GtalkClientEvent_Type type;

@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite) uint32_t numberDiscardedEvents;

@property(nonatomic, readwrite) BOOL hasNumberDiscardedEvents;

@property(nonatomic, readwrite) int32_t networkType;

@property(nonatomic, readwrite) BOOL hasNetworkType;

@property(nonatomic, readwrite) int32_t networkPort;

@property(nonatomic, readwrite) BOOL hasNetworkPort;

@property(nonatomic, readwrite) uint64_t timeConnectionStartedMs;

@property(nonatomic, readwrite) BOOL hasTimeConnectionStartedMs;

@property(nonatomic, readwrite) uint64_t timeConnectionEndedMs;

@property(nonatomic, readwrite) BOOL hasTimeConnectionEndedMs;

@property(nonatomic, readwrite) int32_t errorCode;

@property(nonatomic, readwrite) BOOL hasErrorCode;

@property(nonatomic, readwrite) uint64_t timeConnectionEstablishedMs;

@property(nonatomic, readwrite) BOOL hasTimeConnectionEstablishedMs;

@property(nonatomic, readwrite) GtalkClientEvent_McsReconnectAction mcsReconnectAction;

@property(nonatomic, readwrite) BOOL hasMcsReconnectAction;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
